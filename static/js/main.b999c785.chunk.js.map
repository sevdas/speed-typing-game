{"version":3,"sources":["components/App.js","hooks/useWordGame.js","index.js"],"names":["App","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","handleChange","event","value","target","calculateWordCount","countText","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","useWordGame","ref","type","onChange","onClick","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAGe,SAASA,IAAO,IAAD,ECDf,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EAG7BC,mBAAS,IAHoB,mBAG9CC,EAH8C,KAGxCC,EAHwC,OAIXF,mBAASD,GAJE,mBAI9CI,EAJ8C,KAI/BC,EAJ+B,OAKXJ,oBAAS,GALE,mBAK9CK,EAL8C,KAK/BC,EAL+B,OAMnBN,mBAAS,GANU,mBAM9CO,EAN8C,KAMnCC,EANmC,KAO/CC,EAAaC,iBAAO,MAEpBC,EAAe,SAACC,GAAW,IACvBC,EAAUD,EAAME,OAAhBD,MACRX,EAAQW,IAIJE,EAAqB,SAACC,GAE1B,OADqBf,EAAKgB,OAAOC,MAAM,KACnBC,QAAO,SAACC,GAAD,MAAmB,KAATA,KAAaC,QAK9CC,EAAY,WAChBhB,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWc,QAAQC,UAAW,EAC9Bf,EAAWc,QAAQE,SAGfC,EAAU,WACdpB,GAAiB,GACjBE,EAAaO,EAAmBd,KAelC,OAVA0B,qBAAU,WACJtB,GAAiBF,EAAgB,EACnCyB,YAAW,WACTxB,GAAiB,SAACyB,GAAD,OAAUA,EAAO,OACjC,KACwB,IAAlB1B,GACTuB,MAED,CAACvB,EAAeE,IAEZ,CACLI,aACAR,OACAU,eACAN,gBACAF,gBACAmB,YACAf,aD5CEuB,GAPFrB,EAF0B,EAE1BA,WACAR,EAH0B,EAG1BA,KACAU,EAJ0B,EAI1BA,aACAN,EAL0B,EAK1BA,cACAF,EAN0B,EAM1BA,cACAmB,EAP0B,EAO1BA,UACAf,EAR0B,EAQ1BA,UAIF,OACE,gCACE,uDACA,0BACEwB,IAAKtB,EACLuB,KAAK,OACLnB,MAAOZ,EACPgC,SAAUtB,EACVa,UAAWnB,IAEb,iDAAoBF,KACpB,wBAAQ+B,QAASZ,EAAWa,UAAU,SAASX,SAAUnB,EAAzD,mBAGA,6CAAgBE,QExBtB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxC,EAAD,MAEFyC,SAASC,eAAe,U","file":"static/js/main.b999c785.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport useWordGame from \"../hooks/useWordGame\";\n\nexport default function App() {\n  const {\n    textBoxRef,\n    text,\n    handleChange,\n    isTimeRunning,\n    timeRemaining,\n    startGame,\n    wordCount,\n  } = useWordGame();\n  //Disable the button when time is running\n  //Disable the text area when time is not running\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea\n        ref={textBoxRef}\n        type=\"text\"\n        value={text}\n        onChange={handleChange}\n        disabled={!isTimeRunning}\n      />\n      <h4>Remaining Time:{timeRemaining}</h4>\n      <button onClick={startGame} className=\"button\" disabled={isTimeRunning}>\n        Start\n      </button>\n      <h1>Word Count:{wordCount}</h1>\n    </div>\n  );\n}\n","import { useState, useRef, useEffect } from \"react\";\n\nexport default function useWordGame(startingTime = 10) {\n  //Keep track of the state of the text\n  //Hold current value of the count down timer and display\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(startingTime);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const textBoxRef = useRef(null);\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n    setText(value);\n  };\n\n  //Calculate the number of words in the textarea field\n  const calculateWordCount = (countText) => {\n    const countTextArr = text.trim().split(\" \");\n    return countTextArr.filter((word) => word !== \"\").length;\n  };\n\n  //After the game ends, make it so the user can click the start button again to display a second time.\n  //Make the input box focus immediately when the game starts\n  const startGame = () => {\n    setIsTimeRunning(true);\n    setTimeRemaining(startingTime);\n    setText(\"\");\n    textBoxRef.current.disabled = false;\n    textBoxRef.current.focus();\n  };\n\n  const endGame = () => {\n    setIsTimeRunning(false);\n    setWordCount(calculateWordCount(text));\n  };\n\n  //Update timer every time timeRemaining value changes.\n  //Display number of the words the user typed in once timer reaches 0.\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining((time) => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame();\n    }\n  }, [timeRemaining, isTimeRunning]);\n\n  return {\n    textBoxRef,\n    text,\n    handleChange,\n    isTimeRunning,\n    timeRemaining,\n    startGame,\n    wordCount,\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}